/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.mediapicker;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.KrollFunction;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import org.appcelerator.titanium.TiBlob;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import android.os.Build; 
import android.app.Activity; 
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.provider.MediaStore;
import android.provider.MediaStore.MediaColumns;
import android.media.ThumbnailUtils;


@Kroll.module(name="TiMediaPicker", id="ti.mediapicker")
public class TiMediaPickerModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiMediaPickerModule";
	private static final boolean DBG = TiConfig.LOGD;
	public String type;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public TiMediaPickerModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}
	public static Uri getContentUri(String type) {
			return (type.equals("photos")) 
							? MediaStore.Images.Media.EXTERNAL_CONTENT_URI 
							: MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
	}
	public static String getBucketId(String type) {
			return (type.equals("photos")) 
							? MediaStore.Images.Media.BUCKET_ID
							: MediaStore.Video.Media.BUCKET_ID;
	}
	public static String get_Id(String type) {
			return (type.equals("photos")) 
							? MediaStore.Images.Media._ID
							: MediaStore.Video.Media._ID;
	}
	public static String getBucketDisplayName(String type) {
			return (type.equals("photos")) 
							? MediaStore.Images.Media.BUCKET_DISPLAY_NAME
							: MediaStore.Video.Media.BUCKET_DISPLAY_NAME;
	}
	public static String getData(String type) {
			return (type.equals("photos")) 
							? MediaStore.Images.Media.DATA
							: MediaStore.Video.Media.DATA;
	}

	// Methods
	@Kroll.method
	public void getAssetGroups(KrollDict options)
	{
		final KrollFunction successCallback = (KrollFunction) options.get("success");
		type = (String)options.get("type");
				
        Activity activity = TiApplication.getInstance().getCurrentActivity(); 
		
		String[] projection;
		if (type.equals("videos")) {
			projection = new String[] {
				MediaStore.Video.Media._ID,
				MediaStore.Video.Media.BUCKET_DISPLAY_NAME,
				MediaStore.Video.Media.BUCKET_ID,
				MediaStore.Video.Media.DATA
			};
		} else {
			projection = new String[] {
				MediaStore.Images.Media._ID,
				MediaStore.Images.Media.BUCKET_DISPLAY_NAME,
				MediaStore.Images.Media.BUCKET_ID
			};
		}		
		
		KrollDict d = new KrollDict();
        
		Cursor cur = activity.getContentResolver().query(getContentUri(type),
			projection, // Which columns to return
			"",         // Which rows to return (all rows)
			null,       // Selection arguments (none)
			""          // Ordering
		);
				
		if (cur.moveToFirst()) {
			String bucket;
			int bid;
			int id;			

			do {
				bid = cur.getInt(2);
				id = cur.getInt(0);
				bucket = cur.getString(1);
				if(!d.containsKey(String.valueOf(bid))) {
					KrollDict ddd = new KrollDict();
					
					// Poster Image
					Bitmap thumb;
					if (type.equals("videos")) {
						thumb = ThumbnailUtils.createVideoThumbnail(cur.getString(3),  MediaStore.Video.Thumbnails.MICRO_KIND);
						ddd.put("test", cur.getString(3));
					} else {
						thumb = MediaStore.Images.Thumbnails.getThumbnail(activity.getContentResolver(), id, MediaStore.Images.Thumbnails.MICRO_KIND, null);
						ddd.put("test", type);
					}
					if (thumb != null) {
						ddd.put("image", TiBlob.blobFromImage(thumb));
						
						thumb.recycle();
						thumb=null;
					}
					
					// Count
					final String[] columns = { };
					String selection = getBucketId(type) + " = '" + bid + "'";
					Cursor c = activity.getContentResolver().query(getContentUri(type), columns, selection, null, null); 
					Integer count = c.getCount();
					ddd.put("count", count);

					ddd.put("name", bucket);
					d.put(String.valueOf(bid), ddd);
				}
				
			} while (cur.moveToNext());
		}
		cur.close();
		KrollDict dd = new KrollDict();

		dd.put("items", d);
		successCallback.callAsync(getKrollObject(), dd);
	}
	@Kroll.method
	public void getPhotos(KrollDict options)
	{
		final KrollFunction successCallback = (KrollFunction) options.get("success");
		type = (String)options.get("type");
		String bid = (String)options.get("nr");
		String selection = getBucketId(type) + " = '" + bid + "'";
		        
        Activity activity = TiApplication.getInstance().getCurrentActivity(); 
	
		final String[] columnsA = { getData(type), get_Id(type), "width", "height" };
		final String[] columnsB = { getData(type), get_Id(type), MediaStore.Video.Media.DURATION, "width", "height" };	
		final String[] columns2 = { getData(type), get_Id(type) };		
		
		Cursor c;
		if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.GINGERBREAD_MR1) {
			 c = activity.getContentResolver().query(getContentUri(type), columns2, selection, null, null); 
		} else {
			if (type.equals("videos")) {
				c = activity.getContentResolver().query(getContentUri(type), columnsB, selection, null, null); 
			} else {
				c = activity.getContentResolver().query(getContentUri(type), columnsA, selection, null, null); 
			}
		}

		List<KrollDict> dd = new ArrayList<KrollDict>();
        while (c.moveToNext()) {
			KrollDict d = new KrollDict();
            String dataPath = c.getString(0);
            int id = c.getInt(1);

			d.put("url", dataPath);
			d.put("id", id);
			
			if (Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
				Integer width = c.getInt( c.getColumnIndex( "width" ) );			
				d.put("width", width);
				Integer height = c.getInt( c.getColumnIndex( "height" ) );			
				d.put("height", height);
			}
			if (type.equals("videos") && Build.VERSION.SDK_INT > Build.VERSION_CODES.GINGERBREAD_MR1) {
				Integer duration = c.getInt(2) / 1000;
				d.put("duration", duration);
			}

			dd.add(d);
			// --------            
        }
        c.close();
		KrollDict ddd = new KrollDict();
		Object[] o = dd.toArray();
		ddd.put("items", o);
		successCallback.callAsync(getKrollObject(), ddd);
	}

	@Kroll.method
	public void getThumb(KrollDict options) {
		final KrollFunction successCallback = (KrollFunction) options.get("success");
		//final KrollFunction createCallback = (KrollFunction) options.get("create");
			
		KrollDict d = new KrollDict();
        Activity activity = TiApplication.getInstance().getCurrentActivity(); 
		
		if (type.equals("videos")) {
			String url = (String)options.get("url");
			Bitmap thumb = ThumbnailUtils.createVideoThumbnail(url,  MediaStore.Video.Thumbnails.MICRO_KIND);
			if (thumb != null) {
				d.put("image", TiBlob.blobFromImage(thumb));	
				
				thumb.recycle();
				thumb=null;
			}
			
			File file = new File(url);
			long length = file.length();
			d.put("size", length);
		} else {
			Integer id = (Integer)options.get("url");
			Cursor cursor = MediaStore.Images.Thumbnails.queryMiniThumbnail(activity.getContentResolver(), id, MediaStore.Images.Thumbnails.MINI_KIND, null);		
		
			if (cursor == null || cursor.getCount() == 0) {
				d.put("created", 1);
				//createCallback.callAsync(getKrollObject(), new KrollDict());
				
				// create thumb
				Bitmap thumb = MediaStore.Images.Thumbnails.getThumbnail(activity.getContentResolver(), id, MediaStore.Images.Thumbnails.MINI_KIND, null);

				if (thumb != null) {
					thumb.recycle();
					thumb=null;	

					if (cursor.getCount() == 0) cursor.close(); 
					cursor = MediaStore.Images.Thumbnails.queryMiniThumbnail(activity.getContentResolver(), id, MediaStore.Images.Thumbnails.MINI_KIND, null);
				}
			}	
			
			if( cursor != null && cursor.getCount() > 0 ) {
				cursor.moveToFirst();
				String uri = cursor.getString( cursor.getColumnIndex( getData(type) ) );			
				d.put("image", uri);		
				
				cursor.close();
			}
		}
		
		//return d;
		successCallback.callAsync(getKrollObject(), d);
	}
	
    
    @Kroll.method
	public void getImageByURL(KrollDict options, KrollDict payload) {
		final KrollFunction successCallback = (KrollFunction) options.get("success");
		String uri = (String)options.get("key");
		Integer id = (Integer)options.get("id");
		//Object payload = options.get("payload");
		
		Activity activity = TiApplication.getInstance().getCurrentActivity(); 
        
        KrollDict d = new KrollDict();
		if (payload != null)
		d.put("payload", payload);

		Cursor cursor = MediaStore.Images.Thumbnails.queryMiniThumbnail(
				 activity.getContentResolver(), id,
				 MediaStore.Images.Thumbnails.MINI_KIND,
				 null );
		
		if( cursor != null && cursor.getCount() > 0 ) {
			cursor.moveToFirst();
			String thumb = cursor.getString( cursor.getColumnIndex( MediaStore.Images.Thumbnails.DATA ) );
			d.put("image", thumb);

			String selection = get_Id(type) + " = '" + id + "'";
			final String[] columns = {
				MediaStore.Images.ImageColumns.DATE_TAKEN,
				MediaStore.Images.ImageColumns.LONGITUDE,
				MediaStore.Images.ImageColumns.LATITUDE
			};
			Cursor c = activity.getContentResolver().query(getContentUri(type), columns, selection, null, null); 
			if (c != null && c.moveToFirst()) {
				String date = c.getString(0);
				String lon = c.getString(1);
				String lat = c.getString(2);
				d.put("date", date.substring(0, date.length()-3));
				KrollDict dd = new KrollDict();
				dd.put("longitude", lon);
				dd.put("latitude", lat);
				d.put("location", dd);
				c.close();
			}
			cursor.close();
		}			
	
		BitmapFactory.Options bmpFactoryOptions = new BitmapFactory.Options();
		bmpFactoryOptions.inJustDecodeBounds = true;
		Bitmap bitmap = BitmapFactory.decodeFile(uri, bmpFactoryOptions);
		
		d.put("width", bmpFactoryOptions.outWidth);
		d.put("height", bmpFactoryOptions.outHeight);
		
		File file = new File(uri);
        long length = file.length();
		d.put("size", length);

        successCallback.callAsync(getKrollObject() ,d);
	} 
}